from agents.chef import AgentChef
from agents.mixins.debater import DebaterMixin
from core.base import Message
from typing import Dict, Any, Optional, List
from loguru import logger

class EnhancedAgentChef(AgentChef, DebaterMixin):
    """Agent Chef am√©lior√© avec capacit√©s de d√©bat - VERSION FINALE CORRIG√âE"""

    def __init__(self):
        AgentChef.__init__(self)
        DebaterMixin.__init__(self)
        self.personality = "strategic_visionary"
        self.debate_manager = None  # Sera d√©fini depuis main
        self.specialty = "leadership"

        logger.info("üéñÔ∏è Enhanced Agent Chef initialized with debate capability")

    def process_message(self, message: Message) -> Optional[Message]:
        """Traite les messages avec support d√©bat - CORRIG√â"""

        try:
            # Messages de d√©bat
            if message.type == "DEBATE_INVITATION":
                return self.handle_debate_invitation(message)
            elif message.type == "REQUEST_ARGUMENT":
                return self.handle_argument_request(message)
            elif message.type == "REQUEST_VOTE":
                return self.handle_vote_request(message)
            elif message.type == "DEBATE_RESULT":
                return self.handle_debate_result(message)
            else:
                # Traitement normal par AgentChef
                return super().process_message(message)

        except Exception as e:
            logger.error(f"Enhanced Chef error processing {message.type}: {e}")
            return self._create_error_response(message, str(e))

    def handle_request(self, message: Message) -> Optional[Message]:
        """Traite une requ√™te utilisateur avec d√©cision de d√©bat - CORRIG√â COMPLET"""

        if message.sender != "User":
            return super().handle_request(message)

        user_request = message.content.get("request", "")
        logger.info(f"üéñÔ∏è Enhanced Chef processing: {user_request[:50]}...")

        try:
            # Analyser avec LLM
            analysis = self.think({"user_request": user_request})

            if not analysis:
                return self._create_error_response(message, "Impossible d'analyser votre demande")

            logger.info(f"üìä Analysis result: {analysis}")

            # D√©cision : d√©bat n√©cessaire ?
            should_debate = self.should_initiate_debate(analysis)
            logger.info(f"ü§î Debate needed: {should_debate} (complexity={analysis.get('complexit√©')}, type={analysis.get('type_tache')})")

            if should_debate and self.debate_manager:
                # Initier un d√©bat
                return self.initiate_debate_for_decision(analysis, message)
            else:
                # Traitement normal
                logger.info("üìù Simple request, processing directly...")
                return self._delegate_or_handle(analysis, message)

        except Exception as e:
            logger.error(f"Error in enhanced request handling: {e}")
            return self._create_error_response(message, f"Erreur lors du traitement: {str(e)}")

    def should_initiate_debate(self, analysis: Dict[str, Any]) -> bool:
        """D√©termine si un d√©bat est n√©cessaire - LOGIQUE AM√âLIOR√âE"""

        complexity = analysis.get("complexit√©", "simple")
        task_type = analysis.get("type_tache", "autre")
        stakes = analysis.get("enjeux", "faibles")

        # R√®gles de d√©cision pour d√©clencher un d√©bat
        debate_triggers = {
            "complexit√©": complexity in ["moyenne", "complexe"],
            "type_tache": task_type in ["recherche", "analyse", "architecture"],
            "enjeux": stakes in ["√©lev√©s", "critiques"]
        }

        # Au moins 2 crit√®res doivent √™tre vrais
        trigger_count = sum(debate_triggers.values())

        logger.info(f"üéØ Debate triggers: complexity={debate_triggers['complexit√©']}, type={debate_triggers['type_tache']}, stakes={debate_triggers['enjeux']}")
        logger.info(f"üìä Trigger count: {trigger_count}/3")

        return trigger_count >= 1  # D√©bat si au moins 1 crit√®re

    def initiate_debate_for_decision(self, analysis: Dict[str, Any], original_message: Message) -> Optional[Message]:
        """Initie un d√©bat pour une d√©cision complexe - CORRIG√â COMPLET"""

        try:
            logger.info("üé≠ Complex request detected, initiating debate...")

            # D√©terminer types de participants
            participant_types = self.select_debate_participants(analysis.get("type_tache", "recherche"))
            logger.info(f"üìã Selected participant types for '{analysis.get('type_tache')}': {participant_types}")

            if not self.debate_manager:
                logger.error("‚ùå No debate manager available")
                return self._fallback_to_direct_processing(analysis, original_message)

            # Initier le d√©bat
            logger.info(f"üé≠ Initiating debate with participant types: {participant_types}")

            debate_id = self.debate_manager.initiate_debate(
                topic=analysis.get("compr√©hension", "Question de l'utilisateur"),
                question=f"Quelle est la meilleure approche pour : {original_message.content['request']}?",
                participant_types=participant_types
            )

            if not debate_id:
                logger.error("‚ùå Failed to create debate, falling back to direct processing")
                return self._fallback_to_direct_processing(analysis, original_message)

            logger.success(f"‚úÖ Debate initiated successfully: {debate_id}")

            # R√©pondre √† l'utilisateur
            return Message(
                sender=self.name,
                recipient=original_message.sender,
                type="RESPONSE",
                content={
                    "status": "debate_initiated",
                    "message": f"""üé≠ J'ai initi√© un d√©bat entre experts pour cette question complexe.

üìã Sujet: {analysis.get("compr√©hension", "Votre demande")}
üë• Participants: Experts en {', '.join(participant_types)}
üéØ D√©bat ID: {debate_id}

‚è≥ Les experts vont d√©battre et je vous donnerai leur recommandation finale.""",
                    "debate_id": debate_id,
                    "analysis": analysis
                },
                thread_id=original_message.id
            )

        except Exception as e:
            logger.error(f"Error initiating debate: {e}")
            return self._fallback_to_direct_processing(analysis, original_message)

    def select_debate_participants(self, task_type: str) -> List[str]:
        """S√©lectionne les types de participants pour un d√©bat"""

        participant_mapping = {
            "d√©veloppement": ["developer", "architect", "worker"],
            "analyse": ["analyst", "researcher", "worker"],
            "recherche": ["research", "researcher", "worker"],
            "architecture": ["architect", "developer", "analyst"],
            "s√©curit√©": ["security", "developer", "analyst"],
            "performance": ["performance", "developer", "analyst"],
            "autre": ["worker", "analyst"]
        }

        return participant_mapping.get(task_type, ["research", "researcher", "worker"])

    def _fallback_to_direct_processing(self, analysis: Dict[str, Any], original_message: Message) -> Message:
        """Traitement direct en cas d'√©chec de d√©bat"""

        logger.info("üîÑ Fallback to direct processing")

        return Message(
            sender=self.name,
            recipient=original_message.sender,
            type="RESPONSE",
            content={
                "status": "processed_directly",
                "message": f"""üìã Analyse de votre demande :

{analysis.get('compr√©hension', 'Demande analys√©e')}

üéØ Type de t√¢che : {analysis.get('type_tache', 'Non d√©fini')}
üìä Complexit√© : {analysis.get('complexit√©', 'Non d√©finie')}

Je traite votre demande directement.""",
                "analysis": analysis
            }
        )

    def handle_debate_result(self, message: Message) -> Optional[Message]:
        """Traite le r√©sultat d'un d√©bat - NOUVELLE FONCTION"""

        try:
            result = message.content

            if result.get("for_user", False):
                # Transf√©rer le r√©sultat √† l'utilisateur
                return Message(
                    sender=self.name,
                    recipient="User",
                    type="RESPONSE",
                    content={
                        "status": "debate_completed",
                        "message": result.get("user_message", "D√©bat termin√©"),
                        "debate_details": result.get("raw_result", {})
                    }
                )

            return None

        except Exception as e:
            logger.error(f"Error handling debate result: {e}")
            return None

    def _delegate_or_handle(self, analysis: Dict[str, Any], original_message: Message) -> Message:
        """D√©l√®gue ou traite selon l'analyse"""

        decision = analysis.get("d√©cision", "traiter_directement")

        if decision == "d√©l√©guer":
            # D√©l√©guer au ChefProjet
            return Message(
                sender=self.name,
                recipient="ChefProjet",
                type="TASK_ASSIGNMENT",
                content={
                    "task": analysis.get("instructions_sp√©ciales", original_message.content["request"]),
                    "context": {
                        "original_request": original_message.content["request"],
                        "analysis": analysis,
                        "requester": original_message.sender
                    }
                },
                thread_id=original_message.id
            )
        else:
            # Traiter directement
            return Message(
                sender=self.name,
                recipient=original_message.sender,
                type="RESPONSE",
                content={
                    "status": "completed",
                    "message": f"""‚úÖ J'ai analys√© votre demande.

üìã Compr√©hension : {analysis.get('compr√©hension', 'Demande comprise')}
üéØ Action : {analysis.get('instructions_sp√©ciales', 'Traitement direct')}

Votre demande a √©t√© trait√©e.""",
                    "analysis": analysis
                },
                thread_id=original_message.id
            )

    def participate_in_debate(self, debate_context: Dict[str, Any]) -> Dict[str, Any]:
        """Participe √† un d√©bat en tant que CEO"""

        # Utiliser le mixin pour la participation
        return super().participate_in_debate(debate_context)

    def _create_error_response(self, original_message: Message, error_msg: str) -> Message:
        """Cr√©e une r√©ponse d'erreur"""

        return Message(
            sender=self.name,
            recipient=original_message.sender,
            type="RESPONSE",
            content={
                "status": "error",
                "message": f"‚ùå Erreur : {error_msg}",
                "error": error_msg
            },
            thread_id=original_message.id
        )

    def _format_other_arguments(self, arguments: List[Dict]) -> str:
        """Formate les autres arguments pour le contexte"""

        if not arguments:
            return "Aucun argument pr√©c√©dent"

        formatted = []
        for arg in arguments[:3]:  # Limiter √† 3 arguments
            participant = arg.get("participant", "Inconnu")
            position = arg.get("position", "neutre")
            argument = arg.get("argument", "Argument non disponible")[:100]
            formatted.append(f"‚Ä¢ {participant} ({position}): {argument}...")

        return "\n".join(formatted)
